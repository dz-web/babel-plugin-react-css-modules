{"version":3,"sources":["../../src/getClassName.js"],"names":[],"mappings":";;;;;;;AAOA,IAAM,wBAAwB,SAAxB,qBAAwB,CAAC,SAAD,EAAgC;AAC5D,SAAO,UAAU,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAAnC;AACD,CAFD;;AAIA,IAAM,qCAAqC,SAArC,kCAAqC,CAAC,SAAD,EAAoB,oBAApB,EAA+E;AACxH;AACA;AACA;AACA,MAAM,iBAAiB,UAAU,KAAV,CAAgB,GAAhB,CAAvB;AACA,MAAM,aAAa,eAAe,CAAf,CAAnB;AACA,MAAM,aAAa,eAAe,CAAf,CAAnB;;AAEA,MAAI,CAAC,UAAL,EAAiB;AACf,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,MAAI,CAAC,qBAAqB,UAArB,CAAL,EAAuC;AACrC,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,MAAI,CAAC,qBAAqB,UAArB,EAAiC,UAAjC,CAAL,EAAmD;AACjD,UAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,SAAO,qBAAqB,UAArB,EAAiC,UAAjC,CAAP;AACD,CArBD;;kBAuBe,UAAC,cAAD,EAAyB,oBAAzB,EAAoF;AACjG,MAAM,2BAA2B,OAAO,IAAP,CAAY,oBAAZ,CAAjC;AACA,MAAG,CAAC,cAAJ,EAAoB,OAAO,EAAP;AACpB,SAAO,eACJ,KADI,CACE,GADF,EAEJ,MAFI,CAEG,UAAC,SAAD,EAAe;AACrB,WAAO,SAAP;AACD,GAJI,EAKJ,GALI,CAKA,UAAC,SAAD,EAAe;AAClB,QAAI,sBAAsB,SAAtB,CAAJ,EAAsC;AACpC,aAAO,mCAAmC,SAAnC,EAA8C,oBAA9C,CAAP;AACD;;AAED,QAAI,yBAAyB,MAAzB,KAAoC,CAAxC,EAA2C;AACzC,YAAM,IAAI,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,QAAI,yBAAyB,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,YAAM,IAAI,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAED,QAAM,iBAAqC,qBAAqB,yBAAyB,CAAzB,CAArB,CAA3C;;AAEA,QAAI,CAAC,eAAe,SAAf,CAAL,EAAgC;AAC9B,cAAQ,KAAR,CAAc,uCAAuC,SAAvC,GAAmD,KAAjE;AACA,aAAO,EAAP;AACD;;AAED,WAAO,eAAe,SAAf,CAAP;AACD,GA1BI,EA2BJ,IA3BI,CA2BC,GA3BD,CAAP;AA4BD,C","file":"getClassName.js","sourcesContent":["// @flow\n\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType\n} from './types';\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst getClassNameForNamespacedStyleName = (styleName: string, styleModuleImportMap: StyleModuleImportMapType): string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n\n  if (!moduleName) {\n    throw new Error('Invalid style name.');\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    throw new Error('CSS module import does not exist.');\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    throw new Error('CSS module does not exist.');\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n  if(!styleNameValue) return '';\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => {\n      return styleName;\n    })\n    .map((styleName) => {\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap);\n      }\n\n      if (styleModuleImportMapKeys.length === 0) {\n        throw new Error('Cannot use styleName attribute without importing at least one stylesheet.');\n      }\n\n      if (styleModuleImportMapKeys.length > 1) {\n        throw new Error('Cannot use anonymous style name with more than one stylesheet import.');\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        console.error('Could not resolve the styleName \\'' + styleName + '\\'.');\n        return '';\n      }\n\n      return styleModuleMap[styleName];\n    })\n    .join(' ');\n};\n"]}