{"version":3,"sources":["../src/requireCssModule.js"],"names":["getFiletypeOptions","cssSourceFilePath","filetypes","extension","substr","lastIndexOf","filetype","getSyntax","filetypeOptions","require","syntax","getExtraPlugins","plugins","map","plugin","getTokens","runner","options","from","lazyResult","process","warnings","forEach","message","console","warn","text","root","tokens","scopedName","generateScopedName","context","cwd","fetch","to","fromDirectoryPath","toPath","extraPlugins"],"mappings":";;;;;;AAEA;;AAIA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAWA,MAAMA,qBAAqB,CAACC,iBAAD,EAA4BC,SAA5B,KAA8F;AACvH,QAAMC,YAAYF,kBAAkBG,MAAlB,CAAyBH,kBAAkBI,WAAlB,CAA8B,GAA9B,CAAzB,CAAlB;AACA,QAAMC,WAAWJ,YAAYA,UAAUC,SAAV,CAAZ,GAAmC,IAApD;;AAEA,SAAOG,QAAP;AACD,CALD;;AAOA,MAAMC,YAAaC,eAAD,IAA0D;AAC1E,MAAI,CAACA,eAAL,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED;AACA,SAAOC,QAAQD,gBAAgBE,MAAxB,CAAP;AACD,CAPD;;AASA;AACA,MAAMC,kBAAmBH,eAAD,IAA4D;AAClF,MAAI,CAACA,eAAD,IAAoB,CAACA,gBAAgBI,OAAzC,EAAkD;AAChD,WAAO,EAAP;AACD;;AAED,SAAOJ,gBAAgBI,OAAhB,CAAwBC,GAAxB,CAA6BC,MAAD,IAAY;AAC7C;AACA,WAAOL,QAAQK,MAAR,CAAP;AACD,GAHM,CAAP;AAID,CATD;;AAWA,MAAMC,YAAY,CAACC,MAAD,EAASf,iBAAT,EAAoCO,eAApC,KAA8F;AAC9G,QAAMS,UAAkB;AACtBC,UAAMjB;AADgB,GAAxB;;AAIA,MAAIO,eAAJ,EAAqB;AACnBS,YAAQP,MAAR,GAAiBH,UAAUC,eAAV,CAAjB;AACD;;AAED,QAAMW,aAAaH,OAChBI,OADgB,CACR,sBAAanB,iBAAb,EAAgC,OAAhC,CADQ,EACkCgB,OADlC,CAAnB;;AAGAE,aACGE,QADH,GAEGC,OAFH,CAEYC,OAAD,IAAa;AACpB;AACAC,YAAQC,IAAR,CAAaF,QAAQG,IAArB;AACD,GALH;;AAOA,SAAOP,WAAWQ,IAAX,CAAgBC,MAAvB;AACD,CApBD;;kBA4Be,CAAC3B,iBAAD,EAA4BgB,OAA5B,KAAyE;AACtF;AACA,MAAID,MAAJ;;AAEA,QAAMa,aAAa,4BAAaZ,QAAQa,kBAAR,IAA8B,4CAA3C,EAAyF;AAC1GC,aAASd,QAAQc,OAAR,IAAmBX,QAAQY,GAAR;AAD8E,GAAzF,CAAnB;;AAIA,QAAMxB,kBAAkBR,mBAAmBC,iBAAnB,EAAsCgB,QAAQf,SAA9C,CAAxB;;AAEA,QAAM+B,QAAQ,CAACC,EAAD,EAAahB,IAAb,KAA8B;AAC1C,UAAMiB,oBAAoB,mBAAQjB,IAAR,CAA1B;AACA,UAAMkB,SAAS,mBAAQD,iBAAR,EAA2BD,EAA3B,CAAf;;AAEA,WAAOnB,UAAUC,MAAV,EAAkBoB,MAAlB,EAA0B5B,eAA1B,CAAP;AACD,GALD;;AAOA,QAAM6B,eAAe1B,gBAAgBH,eAAhB,CAArB;;AAEA,QAAMI,UAAU,CACd,GAAGyB,YADW,kHAKd,kCAAU;AACRP,wBAAoBD;AADZ,GAAV,CALc,EAQd,mCAAW;AACTI;AADS,GAAX,CARc,CAAhB;;AAaAjB,WAAS,uBAAQJ,OAAR,CAAT;;AAEA,SAAOG,UAAUC,MAAV,EAAkBf,iBAAlB,EAAqCO,eAArC,CAAP;AACD,C","file":"requireCssModule.js","sourcesContent":["// @flow\n\nimport {\n  dirname,\n  resolve\n} from 'path';\nimport {\n  readFileSync\n} from 'fs';\nimport postcss from 'postcss';\nimport genericNames from 'generic-names';\nimport ExtractImports from 'postcss-modules-extract-imports';\nimport LocalByDefault from 'postcss-modules-local-by-default';\nimport Parser from 'postcss-modules-parser';\nimport Scope from 'postcss-modules-scope';\nimport Values from 'postcss-modules-values';\nimport type {\n  StyleModuleMapType\n} from './types';\n\ntype FileTypeOptions = {|\n  +syntax: string,\n  // eslint-disable-next-line no-undef\n  +plugins?: $ReadOnlyArray<string>\n|};\n\nconst getFiletypeOptions = (cssSourceFilePath: string, filetypes: {[key: string]: FileTypeOptions}): ?FileTypeOptions => {\n  const extension = cssSourceFilePath.substr(cssSourceFilePath.lastIndexOf('.'));\n  const filetype = filetypes ? filetypes[extension] : null;\n\n  return filetype;\n};\n\nconst getSyntax = (filetypeOptions: FileTypeOptions): ?(Function|Object) => {\n  if (!filetypeOptions) {\n    return null;\n  }\n\n  // eslint-disable-next-line import/no-dynamic-require, global-require\n  return require(filetypeOptions.syntax);\n};\n\n// eslint-disable-next-line no-undef\nconst getExtraPlugins = (filetypeOptions: ?FileTypeOptions): $ReadOnlyArray<any> => {\n  if (!filetypeOptions || !filetypeOptions.plugins) {\n    return [];\n  }\n\n  return filetypeOptions.plugins.map((plugin) => {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    return require(plugin);\n  });\n};\n\nconst getTokens = (runner, cssSourceFilePath: string, filetypeOptions: ?FileTypeOptions): StyleModuleMapType => {\n  const options: Object = {\n    from: cssSourceFilePath\n  };\n\n  if (filetypeOptions) {\n    options.syntax = getSyntax(filetypeOptions);\n  }\n\n  const lazyResult = runner\n    .process(readFileSync(cssSourceFilePath, 'utf-8'), options);\n\n  lazyResult\n    .warnings()\n    .forEach((message) => {\n      // eslint-disable-next-line no-console\n      console.warn(message.text);\n    });\n\n  return lazyResult.root.tokens;\n};\n\ntype OptionsType = {|\n  filetypes: Object,\n  generateScopedName?: string,\n  context?: string\n|};\n\nexport default (cssSourceFilePath: string, options: OptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line prefer-const\n  let runner;\n\n  const scopedName = genericNames(options.generateScopedName || '[path]___[name]__[local]___[hash:base64:5]', {\n    context: options.context || process.cwd()\n  });\n\n  const filetypeOptions = getFiletypeOptions(cssSourceFilePath, options.filetypes);\n\n  const fetch = (to: string, from: string) => {\n    const fromDirectoryPath = dirname(from);\n    const toPath = resolve(fromDirectoryPath, to);\n\n    return getTokens(runner, toPath, filetypeOptions);\n  };\n\n  const extraPlugins = getExtraPlugins(filetypeOptions);\n\n  const plugins = [\n    ...extraPlugins,\n    Values,\n    LocalByDefault,\n    ExtractImports,\n    new Scope({\n      generateScopedName: scopedName\n    }),\n    new Parser({\n      fetch\n    })\n  ];\n\n  runner = postcss(plugins);\n\n  return getTokens(runner, cssSourceFilePath, filetypeOptions);\n};\n"]}